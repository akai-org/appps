---
import LanguageFilter from "./filters/LanguageFilter.astro";
import SearchFilter from "./filters/SearchFilter.astro";
import Sort from "./filters/Sort.astro";
const { languages } = Astro.props;
---

<script>
  type FiltersGroups = {
    search: string;
    languages: string[];
  };
  type Project = {
    project: Element;
    languages: string[] | undefined;
  };

  const projects = [...document.getElementsByClassName("project")].map(
    (project) => {
      return {
        project: project,
        languages: project.getAttribute("data-langs")?.split(","),
      };
    },
  );
  const form = document.getElementById("formFilter") as HTMLFormElement | null;
  const shownCounter = document.getElementById("shown-counter");
  // DO UPORZADKOWANIA (kiedys)
  function getHiddenProjects() {
    return [...document.querySelectorAll(`.hidden`)];
  }
  function filterProjects(
    filters: FiltersGroups,
    projects: Project[],
    areFiltersEmpty: boolean = true,
  ) {
    if (areFiltersEmpty) {
      getHiddenProjects().map((project) => project.classList.remove("hidden"));
      if (shownCounter) shownCounter.textContent = projects.length.toString();
      return;
    }
    let counter = 0;
    for (const p of projects) {
      const project = p.project;
      const hasLangs =
        filters.languages.length !== 0
          ? p.languages?.some((lang) => filters.languages.includes(lang!))
          : true;
      const title = project.querySelector("#title")?.textContent?.toLowerCase();
      const hasTitle = filters.search
        ? title?.indexOf(filters.search) !== -1
        : true;
      if (!hasLangs) {
        project?.classList.add("hidden");
      }
      if (!hasTitle) {
        project?.classList.add("hidden");
      }
      if (hasLangs && hasTitle) {
        counter++;
        project?.classList.remove("hidden");
      }
    }
    if (shownCounter) shownCounter.textContent = counter.toString();
  }

  function groupFormData(data: FormData): FiltersGroups {
    return {
      search: data.get("search") as string,
      languages: data.getAll("language") as string[],
    };
  }

  function handleURLChange(formdata: FormData = new FormData()) {
    const query = new URLSearchParams(formdata as any).toString();
    window.history.replaceState({}, "", `${location.pathname}?${query}`);
  }
  function handleURLFilters() {
    const filters: FiltersGroups = {
      search: "",
      languages: [],
    };
    if (filterParams.get("search")) {
      filters.search = filterParams.get("search")!.toLowerCase();
      const input: HTMLInputElement = document.querySelector(`#search`)!;
      input.value = filterParams.get("search")!;
    }
    if (filterParams.getAll("language")) {
      filters.languages = filterParams.getAll("language")!;
      for (const language of filters.languages) {
        const inputId = `lang-${language.toLowerCase()}`;
        const input: HTMLInputElement = document.querySelector(`#${inputId}`)!;
        input.checked = true;
      }
    }
    filterProjects(filters, projects, false);
  }
  const filterParams = new URLSearchParams(window.location.search);
  form?.addEventListener("input", () => {
    const data = new FormData(form);
    const filters: FiltersGroups = groupFormData(data);
    const areFiltersEmpty = data.has("language") && data.get("search") != "";
    handleURLChange(data);
    filterProjects(filters, projects, areFiltersEmpty);
  });
  form?.addEventListener("reset", () => {
    handleURLChange();
    filterProjects({ search: "", languages: [] }, projects);
  });
  window.addEventListener("DOMContentLoaded", handleURLFilters);

  class UrlHandler {}

  class FilterData {
    search: string;
    languages: string[];
    constructor(data: FormData) {
      this.search = data.get("search") as string;
      this.languages = data.getAll("language") as string[];
    }
    areFiltersEmpty(): boolean {
      return this.languages.length == 0 && this.search == "";
    }
  }

  class SortHandler {
    constructor() {}
    sort() {}
  }

  class FilterHandler {
    projectClass: string;
    projects: Element[];
    filterData: FilterData;

    constructor(containerClass: string) {
      this.projectClass = containerClass;
      this.projects = [...document.getElementsByClassName(containerClass)];
      this.filterData = new FilterData(new FormData());
    }
    filter(filterData: FilterData) {
      this.filterData = filterData;
      this.projects.flatMap((project) => {});
    }
    hasTitle(projectTitle: string) {
      const search = this.filterData.search;
      return search ? projectTitle?.indexOf(search) !== -1 : true;
    }
    hasLang(projectLangs: string[]) {
      const langs = this.filterData.languages;
      return langs.length !== 0
        ? projectLangs.some((lang) => langs.includes(lang!))
        : true;
    }
  }

  class FormHandler {
    filterForm: HTMLFormElement;
    sortForm: HTMLFormElement;
    constructor(filterFormId: string, sortFormId: string) {
      this.filterForm = document.getElementById(
        filterFormId,
      ) as HTMLFormElement;
      this.sortForm = document.getElementById(sortFormId) as HTMLFormElement;
      this.setupListeners();
    }
    setupListeners() {
      const sortHandler = new SortHandler();
      this.sortForm.addEventListener("change", (event) => {});
      const filterHandler = new FilterHandler("project");
      this.filterForm.addEventListener("change", (event) => {});
    }
  }
</script>
<div id="form" class="grid gap-y-3 text-black accent-yellow-500">
  <form id="formSort">
    <Sort />
  </form>
  <form id="formFilter" class="grid gap-y-3">
    <SearchFilter />
    <LanguageFilter languages={languages} />
    <input
      type="reset"
      value="Wyczyść"
      class="w-fit rounded-lg bg-amber-400 px-3 py-2 font-bold text-white hover:cursor-pointer"
    />
  </form>
</div>
